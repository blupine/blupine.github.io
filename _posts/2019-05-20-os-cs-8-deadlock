---
layout: post
title:  "8. Concurrency : Deadlock and Starvation"
subtitle: "deadlock/starvation"
date:   2019-05-20 22:55:07 +0900
categories: cs
tags : os
comments: true
---

### Deadlock
- 하나 이상의 프로세스들이 다른 블락(blocked)된  프로세스가 trigger 할 수 있는  어떤 이벤트 혹은 리소스를 기다리고 있는 상황
- **리소스(resource)**?
  - `Reusable resource`
    - 한번에 하나의 프로세스에서만 안전하게 사용될 수 있는 자원(소모되지 않음)
      - e.g) `processors`, `memory`, `I/O devices`, `files`, `databases`, `semaphores`
  - `Consumable resource`
    - 생성되거나 소모될 수 있는 자원
      - e.g) `interrupts`, `signals`, `messages`, `data in I/O buffers`


------------------

### Deadlock 발생 조건
- **Mutual Exclusion**
  - 자원이 Mutual Exclusion이 보장되어야 할 때
- **Hold and wait**
  - 자원을 가지고 있으면서 다른 자원을 요청할 때
- **No preemption**
  - 프로세스가 가지고 있는 자원을 개입해서 뺏을 수 없음
- **Circular wiat**
  - 서로 필요로 하는 자원들을 가진 상태가 원형 체인(chain) 형태로 이루어지는 것

위 세가지(Mutual exclusion, hold and wait, no preemption)은 필요 조건, 이 상태에서 circular wait을 할 경우 deadlock 발생함 

### 세가지 접근 방법
- Deadlock prevention
  - 위의 발생 조건 중 한개를 없애서 데드락 발생 가능성을 없애는 것
- Deadlock avoidance
  - 현재 상황에 따라 동적으로 자원을 할당하며 데드락을 피하는 행위
- Deadlock detection 
  - 데드락이 발생하도록 두고, 발생할 경우 탐지하여 회복시키는 것

![1]({{"assets/img/cs/os/8/1.png" | absolute_url}})

#### Deadlock Prevention
- Mutual exclusion
  - 해결 방법이 없음
- Hold and wait?
  - 자원을 all or nothing 방식으로 할당함
- No preemption
  - 프로세스가 자원 할당에 실패하면 할당된 자원을 모두 뺏음
- Circular wait
  - 리소스에 순서를 주고(ordering) 그 순서대로만 자원 할당이 가능하도록 함

#### Deadlock Avoidance
- 현재 자원 할당이 미래에 데드락을 발생시킬 잠재적인 위험이 있는지 판단
- 접근 방법
  - Process initiation denial
  - Resource allocation denial (핵심) - `banker's algorithm`
    
- 장점
  - deadlock prevention 보다 제한적이지 않음
  - 프로세스를 preemption, rollback 할 필요 없음